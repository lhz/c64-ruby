#!/usr/bin/env ruby

# Merge several C64 object files into a single file suitable for
# packing with for example lzwvl

require 'c64'
require 'c64/memory'

def log(msg)
  $stderr.puts(msg)
end

def hex(number, digits = 4)
  "$%0#{digits}X" % number
end

# Object files to inject
raise "No object files given!" if ARGV.empty?

memory = C64::Memory.new

# Process each object file
ARGV.each do |filename|
  memory.inject_file(filename)
end

# Output address/size
log "Result file spans range #{hex(memory.min_used)} - #{hex(memory.max_used)}."
log "Chunks of used memory:"
memory.chunks.sort_by {|c| c[:from] }.each do |c|
  log " #{hex(c[:from])} - #{hex(c[:to])}  (#{hex(c[:size])})  #{c[:labels].join ', '}"
end

# Write snapshot data back to file
log "Writing result program to standard output."
$stdout.binmode
$stdout.write memory.to_prg
